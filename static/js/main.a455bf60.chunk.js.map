{"version":3,"sources":["StoryPanel.js","YearSlider.js","index.js"],"names":["StoryPanel","m_actionFilter","state","visible","id","props","paragraphs","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","setState","res","i","this","length","push","content","text","actionFilter","className","onChange","threshold","chapter","title","map","paragraph","key","yearStart","minYear","yearEnd","maxYear","Component","StoryParagraph","m_firedAction","m_statusChanged","m_filterArray","handleScroll","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","bottomOffset","bottom","highlighted","action","objects","updateYears","paragraphChange","window","removeEventListener","addEventListener","ReactHtmlParser","MigrationSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","borderRadius","marginTop","marginLeft","boxShadow","active","valueLabel","left","fontSize","background","track","rail","Slider","ScrollyTeller","m_debug","m_percentageCalcs","updateDimensions","innerWidth","innerHeight","panelHeight","sections","activeId","panelChanged","UNSAFE_componentWillMount","sectiondata","renderparagraphs","createPanelContent","year","allPanels","result","filter","features","j","feature","type","replace","url","actions","highlight","setActiveMulti","setActiveName","k","keywords","cap","min","max","lower","c","toUpperCase","section","name","style","parseInt","NavMenuItem","selector","alignToTop","useState","React","useEffect","useMemo","GlobeFunctions","countries","setCountries","hoverD","setHoverD","fetch","process","then","response","console","log","json","colorScale","d3","getVal","feat","properties","GDP_MD_EST","Math","POP_EST","maxVal","domain","globeImageUrl","backgroundImageUrl","polygonsData","d","ISO_A2","polygonAltitude","polygonCapColor","hasActivePolicyInYear","migrationpolicies","polygonSideColor","polygonStrokeColor","polygonLabel","ADMIN","getPolicyText","onPolygonHover","polygonsTransitionDuration","policies","start","end","undefined","substr","str","render","document","getElementById"],"mappings":"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","file":"static/js/main.a455bf60.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    paragraphs: []\r\n  };\r\n\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"filter\": this.props.paragraphs[i].props.actionFilter}\r\n      )\r\n\r\n\r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //   console.log(this.props)\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section  id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={\"chap_\" + this.props.chapter} className={`sticky sectiontitle`}>{this.props.title}</h1>\r\n        </Observer>\r\n\r\n        <div className=\"panelcontent\">\r\n          {this.props.paragraphs.map(\r\n            (paragraph, i) =>\r\n             \r\n                <StoryParagraph\r\n                  key={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                  id={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                  paragraph={paragraph.props.content.text}\r\n                  actionFilter={paragraph.props.actionFilter}\r\n                  yearStart={paragraph.props.content.minYear}\r\n                  yearEnd={paragraph.props.content.maxYear}\r\n                  app = {this.props.app}\r\n\r\n                />\r\n         \r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n\r\n  m_firedAction = false\r\n  m_statusChanged = false\r\n\r\n\r\n  m_filterArray = [\"any\", []]\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n \r\n  handleScroll = (event) =>{\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n      var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n      if (!this.m_firedAction) {\r\n        if (this.state.highlighted) {\r\n          if (this.props.actionFilter) { //if this has any actions supplied\r\n\r\n            this.props.actionFilter.action(this.props.actionFilter.objects, true)\r\n            //   this.m_mapFunctions.setFilterTypeString(this.m_filterArray)\r\n            //TODO HERE this.props.actionFilter.action\r\n          }\r\n          this.m_firedAction = true;\r\n        } else {\r\n          if (this.props.actionFilter) {\r\n\r\n            this.props.actionFilter.action(null, true)\r\n            // this.m_mapFunctions.showAllTypes()\r\n            this.m_firedAction = true;\r\n          }\r\n        }\r\n      }\r\n      if ((topOffset > 80 && topOffset < 600) || (topOffset < 150 && topOffset > 0 && bottomOffset > 300)) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if (!this.state.highlighted) {\r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n       //   console.log(this.props.yearStart)\r\n          this.props.app.updateYears(this.props.yearStart, this.props.yearEnd)\r\n          this.m_firedAction = false\r\n        }\r\n\r\n\r\n      } else {\r\n\r\n        if (this.state.highlighted) {\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    /*if (this.props.actionFilter) {\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      \r\n     \r\n    }*/\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Observer\r\n        onChange={this.paragraphChange}\r\n      >\r\n        <p\r\n          className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n          id={this.props.id}>\r\n          {ReactHtmlParser(this.props.paragraph)}\r\n\r\n        </p>\r\n      </Observer>\r\n    )\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default class YearSlider extends Component {\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.activeYear)\r\n    }\r\n    changeYear = (event,newValue) => {\r\n        console.log(newValue)\r\n        console.log(this.props)\r\n        this.props.callbackFunction(newValue)\r\n    }\r\n    render(){\r\n        return(\r\n            <MigrationSlider  \r\n            value={this.props.activeYear}\r\n            onChange={this.changeYear} \r\n            valueLabelDisplay={\"on\"} \r\n            defaultValue={2000}\r\n            max={2050} \r\n            min={1900} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MigrationSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n      height: 12,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 48,\r\n      backgroundColor: '#fff',\r\n      border: '1px solid currentColor',\r\n      borderRadius: 0,\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n     \r\n      top: 5,\r\n      left: 7,\r\n      fontSize: 14,\r\n    '& *': {\r\n      background: 'transparent',\r\n      color: '#000',\r\n    },\r\n      \r\n    \r\n    },\r\n    track: {\r\n      \r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css'\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport YearSlider from './YearSlider.js'\n//import MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\n//import Stackedbarchart from './stacked-bar.js'\n//import GlobeFunctions from './GlobeFunctions.js'\n\nimport * as d3 from 'd3'\nimport Globe from 'react-globe.gl'\nimport { isElementOfType } from 'react-dom/test-utils';\nclass ScrollyTeller extends Component {\n\n\n    m_debug = true\n    m_percentageCalcs = []\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight, panelHeight: window.innerHeight - 100 });\n\n    };\n\n    //  m_mapfilter = null;\n    state = {\n        sections: [],\n        width: 0,\n        height: 0,\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        panelHeight: 800,\n        minYear: 1945,\n        maxYear:2020\n\n    }\n    panelChanged = false\n    // m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n\n    UNSAFE_componentWillMount = function () {\n        window.addEventListener('resize', this.updateDimensions);\n        this.updateDimensions()\n        var i\n        for (i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year, sectiondata.sections[i].paragraphs)\n\n        }\n       //   console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n        //  console.log(sectiondata.sections)\n\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n    allPanels = []\n    setActiveID = (id) => {\n   //     console.log(id)\n        this.setState({\n            activeId: id\n\n        })\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        var result = [];\n        var filter = \"\";\n        var key = \"\"\n        for (var i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (var j = 0; j < paragraphs[i].features.length; j++) {\n                    var feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    }\n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (j = 0; j < paragraphs[i].actions.length; j++) {\n                    var action = paragraphs[i].actions[j]\n                    if (action.highlight) {\n                        if (action.highlight.type === \"type\") {\n                            filter = {\n\n                                \"action\": this.setActiveMulti,\n                                \"objects\": []\n                            }\n                        } else if (action.highlight.type === \"plant\") {\n                            filter = {\n\n                                \"action\": this.setActiveName,\n                                \"objects\": []\n                            }\n                        }\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (var k = 0; k < action.highlight.keywords.length; k++) {\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k], \"<span class='\" + action.highlight.keywords[k] + \"'>\" + action.highlight.keywords[k] + \"</span>\")\n                            filter.objects.push(this.cap(action.highlight.keywords[k]))\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    }\n                }\n            }\n\n            result.push(\n                <div content={paragraphs[i]} id={key} actionFilter={filter} />\n            )\n        }\n\n        return result\n\n    }\n\n    updateYears(min,max){\n    //    console.log(\"update years: \" + min + \"   \" + max)\n        this.setState({\n            minYear: min,\n            maxYear:max\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <div className=\"MainContainer\">\n                <div className=\"navbar\" id=\"yearNav\">\n                    {this.state.sections.map(\n                        (section, i) =>\n                            <NavMenuItem\n                                key={i}\n                                id={i}\n                                chapter={section.chapter}\n                                name={section.title}\n                                activeId={this.state.activeId}\n                            />\n                    )}\n                </div>\n                    <div className=\"Panels topDistance\" style={{ height: this.state.panelHeight }}>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n\n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.title}\n                                    chapter={section.chapter}\n                                    paragraphs={section.renderparagraphs}\n                                />\n                        )}\n                    </div>\n                    {this.state.width}\n                    <GlobeFunctions width={parseInt(this.state.width / 2)} minYear = {this.state.minYear} maxYear={this.state.maxYear} />\n\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\nconst NavMenuItem = ({ id, name, chapter, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#chap_${chapter}`}\n        alignToTop={false} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"} `}> {name} </div>\n    </ScrollIntoView>\n)\nconst { useState, useEffect, useMemo } = React;\n\n\nconst GlobeFunctions = ({ width, minYear, maxYear }) => {\n\n    const [countries, setCountries] = useState({ features: [] });\n    const [hoverD, setHoverD] = useState();\n\n    useEffect(() => {\n        // load data\n        fetch(process.env.PUBLIC_URL + '/mergedMigrations.json').then(response => {\n            console.log(response);\n            return response.json();\n        }).then(setCountries);\n    }, []);\n\n    const colorScale = d3.scaleSequentialSqrt(d3.interpolateYlOrRd);\n    const getVal = feat => feat.properties.GDP_MD_EST / Math.max(1e5, feat.properties.POP_EST);\n\n    const maxVal = useMemo(\n        () => Math.max(...countries.features.map(getVal)),\n        [countries]\n    );\n\n\n    colorScale.domain([0, maxVal]);\n\n\n\n    return <div className=\"globeContainer\">\n\n        <Globe\n            width={width}\n            globeImageUrl=\"//unpkg.com/three-globe/example/img/earth-night.jpg\"\n            backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n\n            polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n            polygonAltitude={d => d === hoverD ? 0.10 : 0.03}\n            polygonCapColor={d => hasActivePolicyInYear(d.properties.migrationpolicies, minYear, maxYear) ? \"pink\" : \"grey\"}\n            polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n            polygonStrokeColor={() => '#111'}\n            polygonLabel={({ properties: d }) => `\n        <div class=\"popup\"><b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        ${getPolicyText(d.migrationpolicies, minYear, maxYear)}\n        </div>\n      `}\n            onPolygonHover={setHoverD}\n            polygonsTransitionDuration={300}\n        />\n    </div>\n\n}\n\n/*Type of institution\":\"Ministry\",\"Institution Overview\"*/\n\n const getPolicyText = (policies, minYear, maxYear) => {\n    if (policies) {\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n                if ((parseInt(start.substr(0,4)) <= maxYear) && ( (end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear) ) ) {\n                    let str = \"<b>Institution Name:</b> \" + policies[i][\"Institution name\"] + \"<br />\"\n                    str += \"<b>Institution Overview:</b> \" + policies[i][\"Institution Overview\"] + \"<br />\"\n                    str += \"<b> Year of establishment: </b> \" + policies[i][\"Year of establishment\"] + \"<br />\"\n                    str += \"<b> Year of disestablishment: </b> \" + policies[i][\"Year of disestablishment\"] + \"<br />\"\n                    return str\n                }\n            }\n        }\n    }\n\n    return \"\"\n}\n/*\"Year of establishment\":\"1992\",\"Year of disestablishment\":\"1996\"*/\n\nconst hasActivePolicyInYear = (policies, minYear, maxYear) => {\n    //console.log(\"...\")\n    if (policies) {\n\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n  \n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n\n                if ((parseInt(start.substr(0,4)) <= maxYear) && ( (end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear) ) ) {\n                    console.log(\"has active Policy\")\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}