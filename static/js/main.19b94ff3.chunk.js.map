{"version":3,"sources":["StoryPanel.js","YearSlider.js","Helper.js","index.js"],"names":["StoryPanel","m_actionFilter","state","visible","id","props","paragraphs","res","i","this","length","push","content","text","actionFilter","setState","className","activeID","period","chapter","map","paragraph","key","panToFilter","highlightFilter","animation","yearStart","minYear","yearEnd","maxYear","updatePeriod","app","Component","StoryParagraph","m_firedAction","m_statusChanged","m_filterArray","handleScroll","event","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","highlighted","stopAnimation","doChapterAnimation","objects","highlightObjects","setActiveID","updateYears","panToCountry","country","paragraphChange","isIntersecting","window","removeEventListener","addEventListener","onChange","ReactHtmlParser","MigrationSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","borderRadius","marginTop","marginLeft","boxShadow","active","valueLabel","left","fontSize","background","track","rail","Slider","countries","getLocation","ScrollyTeller","m_debug","updateDimensions","innerWidth","innerHeight","panelHeight","sections","activeId","pointOfView","autoRotate","highlightCountries","panelChanged","UNSAFE_componentWillMount","sectiondata","renderparagraphs","createPanelContent","year","allPanels","undefined","console","log","helper","lat","lon","result","animate","features","j","feature","type","replace","url","actions","action","k","highlight","keywords","name","panTo","min","max","lower","c","toUpperCase","section","title","style","animCallback","parseInt","NavMenuItem","selector","alignToTop","useState","React","useEffect","useRef","lastPoint","once","GlobeFunctions","setCountries","hoverD","setHoverD","animationHighlightCountry","setHighlightCountry","globeEl","fetch","process","then","response","json","sleep","ms","Promise","resolve","setTimeout","a","current","controls","panToLocation","lng","animateFunc","altitude","autoRotateSpeed","ref","globeImageUrl","polygonsData","filter","d","properties","ISO_A2","polygonAltitude","getPropertyComparator","hasActivePolicyInPeriod","migrationpolicies","polygonCapColor","indexOf","getColor","polygonSideColor","ADMIN","polygonStrokeColor","polygonLabel","getPolicyText","onPolygonHover","polygonsTransitionDuration","CONTINENT","policies","startPolicy","endPolicy","substr","start","end","str","render","document","getElementById"],"mappings":"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","file":"static/js/main.19b94ff3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    paragraphs: []\r\n  };\r\n\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"filter\": this.props.paragraphs[i].props.actionFilter }\r\n      )\r\n\r\n\r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //   console.log(this.props)\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n    \r\n\r\n         {this.props.period[0]!==0 ?\r\n          <div id={\"chap_\" + this.props.chapter} className={`sticky sectiontitle`}> {this.props.period[0]} - { this.props.period[1]}</div>\r\n\r\n         :\"\"}\r\n\r\n        <div className=\"panelcontent\">\r\n          {this.props.paragraphs.map(\r\n            (paragraph, i) =>\r\n\r\n              <StoryParagraph\r\n                key={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                id={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                paragraph={paragraph.props.content.text}\r\n                panToFilter={paragraph.props.panToFilter}\r\n                highlightFilter={paragraph.props.highlightFilter}\r\n                animation = {paragraph.props.animation}\r\n                yearStart={paragraph.props.content.minYear}\r\n                yearEnd={paragraph.props.content.maxYear}\r\n                updatePeriod = { this.props.period[0]===0}\r\n                app={this.props.app}\r\n                id = {this.props.id}\r\n\r\n              />\r\n\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n\r\n  m_firedAction = false\r\n  m_statusChanged = false\r\n\r\n\r\n  m_filterArray = [\"any\", []]\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n\r\n  handleScroll = (event) => {\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n\r\n      if ((topOffset > 80 && topOffset < 400) ) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if (!this.state.highlighted) {\r\n          if(this.props.animation === true && !this.m_firedAction) {\r\n            this.props.app.doChapterAnimation(this.props.highlightFilter.objects)\r\n            this.m_firedAction = true\r\n          } else {\r\n            this.props.app.stopAnimation()\r\n          }\r\n         \r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n          this.props.app.highlightObjects(this.props.highlightFilter.objects)\r\n          this.props.app.setActiveID(this.props.id)\r\n          //   console.log(this.props.yearStart)\r\n          this.props.app.updateYears(this.props.yearStart, this.props.yearEnd)\r\n          \r\n          if(this.props.panToFilter)\r\n            this.props.app.panToCountry(this.props.panToFilter.country)\r\n          \r\n        }\r\n\r\n\r\n      } else {\r\n\r\n        if (this.state.highlighted) {\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    /*if (this.props.actionFilter) {\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      \r\n     \r\n    }*/\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      {this.props.updatePeriod ? \r\n          <div className={`sticky sectiontitle`}> {this.props.yearStart} - { this.props.yearEnd}</div>\r\n      : \r\n      \"\"}\r\n        <Observer\r\n          onChange={this.paragraphChange}\r\n        >\r\n\r\n          <p\r\n            className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n            id={this.props.id}>\r\n            {ReactHtmlParser(this.props.paragraph)}\r\n\r\n          </p>\r\n        </Observer>\r\n        </div>\r\n   \r\n    )\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default class YearSlider extends Component {\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.activeYear)\r\n    }\r\n    changeYear = (event,newValue) => {\r\n        console.log(newValue)\r\n        console.log(this.props)\r\n        this.props.callbackFunction(newValue)\r\n    }\r\n    render(){\r\n        return(\r\n            <MigrationSlider  \r\n            value={this.props.activeYear}\r\n            onChange={this.changeYear} \r\n            valueLabelDisplay={\"on\"} \r\n            defaultValue={2000}\r\n            max={2050} \r\n            min={1900} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MigrationSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n      height: 12,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 48,\r\n      backgroundColor: '#fff',\r\n      border: '1px solid currentColor',\r\n      borderRadius: 0,\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n     \r\n      top: 5,\r\n      left: 7,\r\n      fontSize: 14,\r\n    '& *': {\r\n      background: 'transparent',\r\n      color: '#000',\r\n    },\r\n      \r\n    \r\n    },\r\n    track: {\r\n      \r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);","\r\nconst countries =  {\r\n    \"Israel\": { \"lat\": 31.0461, \"lon\": 34.8516 },\r\n    \"Europe\": { \"lat\": 54.5260, \"lon\": 15.2551 },\r\n    \"China-Japan\": { \"lat\": 35.8617, \"lon\": 114.1954 },\r\n    \"India\": { \"lat\": 20.5937, \"lon\": 78.9629 },\r\n    \"Eritrea\": { \"lat\": 15.1794, \"lon\": 39.7823 },\r\n    \"Mexico\": { \"lat\": 23.6345, \"lon\": -102.5528},\r\n    \"Germany\": { \"lat\": 51.1657, \"lon\": 10.4515},\r\n    \"France\": { \"lat\": 46.2276, \"lon\": 2.2137},\r\n    \"Italy\": { \"lat\": 41.8719, \"lon\":12.5674},\r\n    \"China\":{\"lat\": 35.8617, \"lon\": 114.1954},\r\n    \"Japan\":{\"lat\": 36.2048, \"lon\": 138.2529},\r\n    \"Philippines\":{\"lat\":12.8797 , \"lon\": 121.7740},\r\n     \"Nepal\" :{\"lat\":28.3949 , \"lon\":84.1240 },\r\n    \"Bangladesh\" :{\"lat\":23.6850 , \"lon\": 90.3563},\r\n    \"Pakistan\":{\"lat\":30.3753 , \"lon\":69.3451 },\r\n    \"Kazakhstan\":{\"lat\":48.0196 , \"lon\": 66.9237},\r\n    \"Kyrgyzstan\": {\"lat\":41.2044 , \"lon\": 74.7661},\r\n    \"Tajikistan\":{\"lat\":38.8610 , \"lon\":71.2761 },\r\n    \"Turkmenistan\": {\"lat\": 38.9697, \"lon\":59.5563 },\r\n    \"Uzbekistan\":{\"lat\": 41.3775, \"lon\": 64.5853},\r\n    \"Hungary\":{ \"lat\": 51.1657, \"lon\": 10.4515},\r\n     \"Czech Republic\":{ \"lat\": 51.1657, \"lon\": 10.4515}, \"Estonia\":{ \"lat\":56.8796, \"lon\": 24.6032}, \"Latvia\":{ \"lat\":56.8796, \"lon\": 24.6032},\r\n      \"Lithuania\":{ \"lat\":56.8796, \"lon\": 24.6032},\r\n       \"Poland\":{ \"lat\": 51.1657, \"lon\": 10.4515}, \r\n       \"Slovakia\":{\"lat\": 51.1657, \"lon\": 10.4515}, \"Slovenia\": {\"lat\": 51.1657, \"lon\": 10.4515}, \"Ireland\":{\"lat\": 53.1424, \"lon\": -7.6921},\r\n        \"Portugal\":{\"lat\": 39.3999, \"lon\": -8.2245},\r\n       \"Central African Republic\": {\"lat\":6.6111,\"lon\":20.9394},\r\n       \"Brazil\":{\"lat\":-15.6280,\"lon\":-52.7226},\r\n       \"Cuba\":{\"lat\":21.5218,\"lon\":- 77.7812},\r\n       \"Africa\":{\"lat\":6.6111,\"lon\":20.9394},\r\n       \"South America\":{\"lat\":-15.6280,\"lon\":-52.7226}\r\n}\r\nexport function getCountryLocations(){\r\n    return  countries\r\n}\r\n\r\nexport function getLocation(country){\r\n    return countries[country]\r\n}","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css'\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport YearSlider from './YearSlider.js'\n//import MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\n//import Stackedbarchart from './stacked-bar.js'\n//import GlobeFunctions from './GlobeFunctions.js'\nimport * as helper from './Helper.js'\nimport * as d3 from 'd3'\nimport Globe from 'react-globe.gl'\nimport { isElementOfType } from 'react-dom/test-utils';\nclass ScrollyTeller extends Component {\n\n\n    m_debug = true\n\n\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight, panelHeight: window.innerHeight - 100 });\n\n    };\n\n    //  m_mapfilter = null;\n    state = {\n        sections: [],\n        width: 0,\n        height: 0,\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        panelHeight: 800,\n        minYear: 1945,\n        maxYear: 2020,\n        pointOfView: null,\n        autoRotate: true,\n        highlightCountries: []\n\n    }\n    panelChanged = false\n    // m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n\n    UNSAFE_componentWillMount = function () {\n        window.addEventListener('resize', this.updateDimensions);\n        this.updateDimensions()\n        let i\n        for (i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year, sectiondata.sections[i].paragraphs)\n\n        }\n        //   console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n        //  console.log(sectiondata.sections)\n\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n    allPanels = []\n    setActiveID = (id) => {\n\n        this.setState({\n            activeId: id\n        })\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        let result = [];\n\n        let key = \"\"\n        for (let i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            let highlightFilter = {\n                \"objects\": []\n            }\n            let panToFilter = \"\";\n            let animate = false\n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (let j = 0; j < paragraphs[i].features.length; j++) {\n                    let feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    }\n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (let j = 0; j < paragraphs[i].actions.length; j++) {\n                    let action = paragraphs[i].actions[j]\n                    if (action[\"highlight\"] !== undefined) {\n\n\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (let k = 0; k < action.highlight.keywords.length; k++) {\n                            //     console.log(action.highlight.keywords[k])\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k].name, \"<span class='bold'>\" + action.highlight.keywords[k].name + \"</span>\")\n                            highlightFilter.objects.push(action.highlight.keywords[k])\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    }\n                    if (action[\"panTo\"] !== undefined) {\n                        panToFilter = {\n                            \"country\": action.panTo\n                        }\n                    }\n\n                    if (action[\"animation\"] !== undefined) {\n                        animate = true\n                    }\n                }\n\n            }\n            result.push(\n                <div content={paragraphs[i]} id={key} animation={animate} panToFilter={panToFilter} highlightFilter={highlightFilter} />\n            )\n        }\n        return result\n    }\n\n\n    panToCountry = (country) => {\n        if (country !== undefined && country !== null) {\n            console.log(\"should pan to country: \" + country)\n\n            this.setState({\n                pointOfView: { \"lat\": helper.getLocation(country).lat, \"lon\": helper.getLocation(country).lon, \"altitude\": 1, \"ms\": 1000 },\n                autoRotate: false,\n                animation: false\n            })\n        } else {\n            this.setState({\n                pointOfView: null,\n                autoRotate: true\n\n            })\n        }\n    }\n    highlightObjects(objects) {\n        //highlight countries on the globe\n        this.setState({\n            highlightCountries: objects\n        })\n    }\n\n    doChapterAnimation(objects) {\n        console.log(\"chapterAnimation\")\n        this.setState({\n            animation: true,\n            highlightCountries: objects\n        })\n    }\n\n    stopAnimation = () => {\n        this.setState({\n            animation: false\n        })\n    }\n    updateYears(min, max) {\n        //    console.log(\"update years: \" + min + \"   \" + max)\n        this.setState({\n            minYear: min,\n            maxYear: max\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <div className=\"MainContainer\">\n                    <div className=\"navbar\" id=\"yearNav\">\n                        {this.state.sections.map(\n                            (section, i) =>\n                                <NavMenuItem\n                                    key={i}\n                                    id={i}\n                                    chapter={section.chapter}\n                                    name={section.title}\n                                    activeId={this.state.activeId}\n                                />\n                        )}\n                    </div>\n                    <div className=\"Panels topDistance\" style={{ height: this.state.panelHeight }}>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n\n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.title}\n                                    chapter={section.chapter}\n                                    paragraphs={section.renderparagraphs}\n                                    period={section.period}\n                                />\n                        )}\n                    </div>\n\n                    <GlobeFunctions animation={this.state.animation} animCallback={this.stopAnimation} highlightCountries={this.state.highlightCountries} autoRotate={this.state.autoRotate} pointOfView={this.state.pointOfView} width={parseInt(this.state.width / 2)} minYear={this.state.minYear} maxYear={this.state.maxYear} />\n\n                </div>\n\n            </div>\n        );\n    }\n}\n\n\n\nconst NavMenuItem = ({ id, name, chapter, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#chap_${chapter}`}\n        alignToTop={false} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"} `}> {name} </div>\n    </ScrollIntoView>\n)\nconst { useState, useEffect, useRef } = React;\n\nconst NOPOLICY = \"rgba(0,0,0,0.0)\"\nconst HIGHLIGHT_WITH_POLICY = \"rgba(222,235,247,0.9)\"\nconst HIGHLIGHT_NO_POLICY = \"rgba(222,235,247,0.7)\"\nconst ACTIVE_POLICY_ESTABLISHED_IN_PERIOD = \"rgba(158,202,225,0.8)\"\nconst ACTIVE_HISTORICAL_POLICY = \"rgba(49,130,189,0.6)\"\nconst POLYGON_SIDE_COLOR = \"rgba(0, 100, 0, 0.15)\"\nconst POLYGON_SIDE_COLOR_HIGHLIGHT =\"rgba(0, 100, 0, 0.7)\"\nconst ANIMATION_HIGHLIGHT_COLOR = \"rgb(70,102,255)\"\nlet lastPoint = null\nlet once = true;\nlet i;\nconst GlobeFunctions = ({ width, minYear, maxYear, pointOfView, animation, animCallback, highlightCountries }) => {\n\n    const [countries, setCountries] = useState({ features: [] });\n    const [hoverD, setHoverD] = useState();\n    const [animationHighlightCountry,setHighlightCountry] = useState(\"\");\n    const globeEl = useRef()\n    \n\n    useEffect(() => {\n        // load data\n        fetch(process.env.PUBLIC_URL + '/mergedMigrations.json').then(response => {\n            console.log(response);\n            return response.json();\n        }).then(setCountries);\n\n\n    }, []);\n\n    const sleep = ms => {\n        return new Promise(resolve => setTimeout(resolve, ms))\n    }\n\n    useEffect(() => {\n        if (animation && once) {\n            console.log(\"animatino once\")\n            globeEl.current.controls().autoRotate = false\n            once = false\n            animateFunc()\n\n\n        } else if(!animation) {\n            i =5000\n            if (pointOfView !== null) {\n                if (lastPoint !== pointOfView) {\n                    globeEl.current.pointOfView({ lat: pointOfView.lat, lng: pointOfView.lon, altitude: pointOfView.altitude }, pointOfView.ms)\n                    globeEl.current.controls().autoRotate = false\n                    lastPoint = pointOfView\n                }\n\n            } else {\n                if (lastPoint !== null)\n                    globeEl.current.pointOfView({ lat: lastPoint.lat, lng: lastPoint.lon, altitude: 2.5 }, lastPoint.ms)\n                globeEl.current.controls().autoRotate = true\n                globeEl.current.controls().autoRotateSpeed = 0.4\n                lastPoint = null\n\n            }\n        }\n\n        if (!animation) {\n            i = 5000\n            once = true\n        }\n        //   console.log(pointOfView)\n\n    })\n\n\n    async function animateFunc() {\n        console.log(\"Animationstart\")\n        console.log(highlightCountries)\n\n        globeEl.current.controls().autoRotate = false\n\n        for (i = 0; i < highlightCountries.length; i++) {\n            console.log(i)\n            if(animation) {\n                setHighlightCountry(highlightCountries[i])\n                panToLocation(helper.getLocation(highlightCountries[i].name).lat,helper.getLocation(highlightCountries[i].name).lon)\n                await sleep(1000)\n            } else {\n                console.log(\"interrupted animation\")\n                break;\n            }\n        }\n        animCallback()\n        once = false\n        setHighlightCountry(\"\")\n\n    }\n\n    function panToLocation(lat,lon){\n        globeEl.current.pointOfView({ lat: lat, lng: lon, \"altitude\": 1}, 1000)\n    }\n    return <div className=\"globeContainer\">\n\n        <Globe\n            ref={globeEl}\n            width={width}\n            globeImageUrl=\"//unpkg.com/three-globe@2.11.1/example/img/earth-day.jpg\"\n            // backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n            backgroundColor=\"white\"\n            polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n            polygonAltitude={d => \n                            animationHighlightCountry.name === getPropertyComparator(d,animationHighlightCountry.type) ? 0.1 :\n                                 hasActivePolicyInPeriod(d.properties.migrationpolicies, minYear, maxYear) ? d === hoverD ? 0.06 : 0.01 : 0.004\n                            }\n\n            polygonCapColor={d => animationHighlightCountry.name ===  getPropertyComparator(d,animationHighlightCountry.type) ? ANIMATION_HIGHLIGHT_COLOR :\n                highlightCountries.indexOf( getPropertyComparator(d,animationHighlightCountry.type)) > -1 ?\n                hasActivePolicyInPeriod(d.properties.migrationpolicies, minYear, maxYear) ?\n                    HIGHLIGHT_WITH_POLICY : HIGHLIGHT_NO_POLICY : getColor(d.properties.migrationpolicies, minYear, maxYear)}\n            polygonSideColor={d => animationHighlightCountry === d.properties.ADMIN ? POLYGON_SIDE_COLOR_HIGHLIGHT :  POLYGON_SIDE_COLOR}\n            polygonStrokeColor={d => hasActivePolicyInPeriod(d.properties.migrationpolicies, minYear, maxYear) ? '#111' : 'lightgrey'}\n            polygonLabel={({ properties: d }) => `\n        <div class=\"popup\"><b>${d.ADMIN} (${d.ISO_A2})</b> <br />\n        ${getPolicyText(d.migrationpolicies, minYear, maxYear)}\n        </div>\n      `}\n            onPolygonHover={setHoverD}\n            polygonsTransitionDuration={300}\n\n        />\n    </div>\n}\n\n\nconst getPropertyComparator=(d,type)=>{\n    if(type===\"country\"){\n        console.log(d.properties.ADMIN)\n        return d.properties.ADMIN\n    } else {\n        return d.properties.CONTINENT\n    }\n}\nconst getColor = (policies, minYear, maxYear, year) => {\n\n    if (policies) {\n\n        for (let i = 0; i < policies.length; i++) {\n            let startPolicy = policies[i][\"Year of establishment\"]\n            let endPolicy = policies[i][\"Year of disestablishment\"]\n\n            if (startPolicy !== \"Nil\" && startPolicy !== undefined && endPolicy !== undefined) {\n\n                if ((parseInt(startPolicy.substr(0, 4)) <= maxYear) && ((endPolicy === \"Nil\") || (parseInt(endPolicy.substr(0, 4)) > minYear))) {\n                    //             console.log(\"has active Policy\")\n                    if (parseInt(startPolicy.substr(0, 4)) < minYear) {\n                        return ACTIVE_HISTORICAL_POLICY  //active policy established before the period\n                    } else {\n                        return ACTIVE_POLICY_ESTABLISHED_IN_PERIOD\n                    }\n                } else {\n                    //no active policy\n                    return NOPOLICY\n                }\n            }\n        }\n    }\n    return NOPOLICY\n    //if we want to highlight this country as \"being talked about in this period\"  \"rgba(34,139,34,0.7)\"\n\n\n    // if a country has an active policy in this period, established BEFORE: \"rgba(219,112,147,0.7)\"\n\n    //if a country established a policy within this period: \"blue\"\n\n\n    //no active policy: transparent\n}\n\n/*Type of institution\":\"Ministry\",\"Institution Overview\"*/\n\nconst getPolicyText = (policies, minYear, maxYear) => {\n    if (policies) {\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n                if ((parseInt(start.substr(0, 4)) <= maxYear) && ((end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear))) {\n                    let str = \"<b>Institution Name:</b> \" + policies[i][\"Institution name\"] + \"<br />\"\n                    str += \"<b>Institution Overview:</b> \" + policies[i][\"Institution Overview\"] + \"<br />\"\n                    str += \"<b> Year of establishment: </b> \" + policies[i][\"Year of establishment\"] + \"<br />\"\n                    str += \"<b> Year of disestablishment: </b> \" + policies[i][\"Year of disestablishment\"] + \"<br />\"\n                    return str\n                }\n            }\n        }\n    }\n\n    return \"\"\n}\n\n\n/*\"Year of establishment\":\"1992\",\"Year of disestablishment\":\"1996\"*/\n\nconst hasActivePolicyInPeriod = (policies, minYear, maxYear) => {\n    //console.log(\"...\")\n    if (policies) {\n\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n\n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n\n                if ((parseInt(start.substr(0, 4)) <= maxYear) && ((end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear))) {\n                    //             console.log(\"has active Policy\")\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}