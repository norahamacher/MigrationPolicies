{"version":3,"sources":["StoryPanel.js","YearSlider.js","index.js"],"names":["StoryPanel","m_actionFilter","state","visible","id","props","paragraphs","headerHandleChange","event","isIntersecting","activeID","app","setActiveID","setState","res","i","this","length","push","content","text","actionFilter","className","onChange","threshold","chapter","map","paragraph","key","panToFilter","highlightFilter","yearStart","minYear","yearEnd","maxYear","Component","StoryParagraph","m_firedAction","m_statusChanged","m_filterArray","handleScroll","topOffset","ReactDOM","findDOMNode","getBoundingClientRect","top","bottom","highlighted","updateYears","panToCountry","country","highlightObjects","objects","paragraphChange","window","removeEventListener","addEventListener","ReactHtmlParser","MigrationSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","borderRadius","marginTop","marginLeft","boxShadow","active","valueLabel","left","fontSize","background","track","rail","Slider","ScrollyTeller","m_debug","updateDimensions","innerWidth","innerHeight","panelHeight","sections","activeId","pointOfView","autoRotate","highlightCountries","panelChanged","UNSAFE_componentWillMount","sectiondata","renderparagraphs","createPanelContent","year","allPanels","m_countryLocations","console","log","undefined","lat","lon","result","filter","features","j","feature","type","replace","url","actions","action","k","highlight","keywords","cap","panTo","min","max","lower","c","toUpperCase","section","name","title","style","parseInt","NavMenuItem","selector","alignToTop","useState","React","useEffect","useRef","GlobeFunctions","countries","setCountries","hoverD","setHoverD","globeEl","fetch","process","then","response","json","current","lng","altitude","ms","controls","ref","globeImageUrl","polygonsData","d","properties","ISO_A2","polygonAltitude","polygonCapColor","hasActivePolicyInYear","migrationpolicies","indexOf","ADMIN","polygonSideColor","polygonStrokeColor","polygonLabel","getPolicyText","onPolygonHover","polygonsTransitionDuration","policies","start","end","substr","str","render","document","getElementById"],"mappings":"+VAKqBA,E,4MAEnBC,eAAiB,K,EACjBC,MAAQ,CACNC,SAAS,EACTC,GAAI,EAAKC,MAAMD,GACfE,WAAY,I,EAGdC,mBAAqB,SAAAC,GAEfA,EAAMC,gBAAkB,EAAKJ,MAAMD,KAAO,EAAKC,MAAMK,UACvD,EAAKL,MAAMM,IAAIC,YAAY,EAAKP,MAAMD,IAGxC,EAAKS,SAAS,CACZV,QAAS,EAAKE,MAAMD,KAAO,EAAKC,MAAMK,Y,kEAQxC,IADA,IAAII,EAAM,GACDC,EAAI,EAAGA,EAAIC,KAAKX,MAAMC,WAAWW,OAAQF,IAChDD,EAAII,KACF,CAAE,KAAQF,KAAKX,MAAMC,WAAWS,GAAGV,MAAMc,QAAQC,KAAM,OAAUJ,KAAKX,MAAMC,WAAWS,GAAGV,MAAMgB,eAKlGL,KAAKH,SAAS,CACZP,WAAYQ,M,6EAQR,IAAD,OAEP,OACE,6BAASV,GAAI,WAAaY,KAAKd,MAAME,GAAIkB,UAAS,4BAAuBN,KAAKd,MAAMC,SAAWa,KAAKd,MAAME,KAAOY,KAAKX,MAAMK,SAAW,cAAgB,kBACrJ,kBAAC,IAAD,CAAUa,SAAUP,KAAKT,mBACvBiB,UAAW,GAGX,wBAAIpB,GAAI,QAAUY,KAAKX,MAAMoB,QAASH,UAAS,yBAIjD,yBAAKA,UAAU,gBACZN,KAAKX,MAAMC,WAAWoB,KACrB,SAACC,EAAWZ,GAAZ,OAEE,kBAAC,EAAD,CACEa,IAAK,QAAU,EAAKvB,MAAMoB,QAAU,QAAUV,EAC9CX,GAAI,QAAU,EAAKC,MAAMoB,QAAU,QAAUV,EAC7CY,UAAWA,EAAUtB,MAAMc,QAAQC,KACnCS,YAAaF,EAAUtB,MAAMwB,YAC7BC,gBAAiBH,EAAUtB,MAAMyB,gBACjCC,UAAWJ,EAAUtB,MAAMc,QAAQa,QACnCC,QAASN,EAAUtB,MAAMc,QAAQe,QACjCvB,IAAK,EAAKN,MAAMM,e,GAhEQwB,aA6ElCC,E,4MAGJC,eAAgB,E,EAChBC,iBAAkB,E,EAGlBC,cAAgB,CAAC,MAAO,I,EACxBrC,MAAQ,CACNE,GAAI,EAAKC,MAAMD,GACfD,SAAS,G,EASXqC,aAAe,SAAChC,GAEd,GAAI,EAAKN,MAAMC,QAAS,CACtB,IAAIsC,EAAYC,IAASC,YAAT,gBAA2BC,wBAAwBC,IAChDH,IAASC,YAAT,gBAA2BC,wBAAwBE,OAEjEL,EAAY,IAAMA,EAAY,IAE5B,EAAKvC,MAAM6C,cACd,EAAKlC,SAAS,CACZkC,aAAa,IAGf,EAAK1C,MAAMM,IAAIqC,YAAY,EAAK3C,MAAM0B,UAAW,EAAK1B,MAAM4B,SAE1D,EAAK5B,MAAMM,IAAIsC,aAAa,EAAK5C,MAAMwB,YAAYqB,SAGnD,EAAKb,eAAgB,EAGrB,EAAKhC,MAAMM,IAAIwC,iBAAiB,EAAK9C,MAAMyB,gBAAgBsB,UAO3D,EAAKlD,MAAM6C,cAEb,EAAKlC,SAAS,CACZkC,aAAa,IAGf,EAAKV,eAAgB,K,EAwB7BgB,gBAAkB,SAAA7C,GAChB,EAAKK,SAAS,CACZV,QAASK,EAAMC,kB,qEAhEjB6C,OAAOC,oBAAoB,SAAUvC,KAAKwB,gB,0CA+C1Cc,OAAOE,iBAAiB,SAAUxC,KAAKwB,gB,+BAuBvC,OAEI,kBAAC,IAAD,CACEjB,SAAUP,KAAKqC,iBAEf,uBACE/B,UAAS,qBAAgBN,KAAKd,MAAM6C,YAAc,SAAW,IAC7D3C,GAAIY,KAAKX,MAAMD,IACdqD,IAAgBzC,KAAKX,MAAMsB,iB,GA7FXQ,a,iBCnDvBuB,GAxBkCvB,YAwBhBwB,YAAW,CAC/BC,KAAM,CACJC,MAAO,UACPC,OAAQ,IAEVC,MAAO,CACLD,OAAQ,GACRE,MAAO,GACPC,gBAAiB,OACjBC,OAAQ,yBACRC,aAAc,EACdC,WAAY,EACZC,YAAa,GACb,6BAA8B,CAC5BC,UAAW,YAGfC,OAAQ,GACRC,WAAY,CAEV3B,IAAK,EACL4B,KAAM,EACNC,SAAU,GACZ,MAAO,CACLC,WAAY,cACZd,MAAO,SAKTe,MAAO,CAELd,OAAQ,EACRK,aAAc,GAEhBU,KAAM,CACJf,OAAQ,EACRK,aAAc,IArCIR,CAuCnBmB,M,0CCrDCC,G,mNAGFC,SAAU,E,EAGVC,iBAAmB,WACf,EAAKpE,SAAS,CAAEmD,MAAOV,OAAO4B,WAAYpB,OAAQR,OAAO6B,YAAaC,YAAa9B,OAAO6B,YAAc,O,EAK5GjF,MAAQ,CACJmF,SAAU,GACVrB,MAAO,EACPF,OAAQ,EAGRwB,SAAU,EACVF,YAAa,IACbpD,QAAS,KACTE,QAAS,KACTqD,YAAa,KACbC,YAAY,EACZC,mBAAoB,I,EAGxBC,cAAe,E,EAKfC,0BAA4B,WAGxB,IAAI5E,EACJ,IAHAuC,OAAOE,iBAAiB,SAAUxC,KAAKiE,kBACvCjE,KAAKiE,mBAEAlE,EAAI,EAAGA,EAAI6E,EAAYP,SAASpE,OAAQF,IACzC6E,EAAYP,SAAStE,GAAG8E,iBAAmB7E,KAAK8E,mBAAmBF,EAAYP,SAAStE,GAAGgF,KAAMH,EAAYP,SAAStE,GAAGT,YAK7HU,KAAKH,SAAS,CACVwE,SAAUO,EAAYP,Y,EAU9BW,UAAY,G,EACZpF,YAAc,SAACR,GAEX,EAAKS,SAAS,CACVyE,SAAUlF,K,EA6DlB6F,mBAAqB,CACjB,OAAU,CAAE,IAAO,QAAS,IAAO,SACnC,OAAU,CAAE,IAAO,OAAS,IAAO,SACnC,cAAe,CAAE,IAAO,QAAS,IAAO,W,EAE5ChD,aAAe,SAACC,GACZgD,QAAQC,IAAIjD,QACIkD,IAAZlD,GAAmC,OAAVA,GACzBgD,QAAQC,IAAI,0BAA4BjD,GAExC,EAAKrC,SAAS,CACV0E,YAAa,CAAE,IAAO,EAAKU,mBAAmB/C,GAASmD,IAAK,IAAO,EAAKJ,mBAAmB/C,GAASoD,IAAK,SAAY,IAAK,GAAK,KAC/Hd,YAAW,KAGf,EAAK3E,SAAS,CACV0E,YAAY,Q,qEAnFpBjC,OAAOC,oBAAoB,SAAUvC,KAAKiE,oB,yCAW3Bc,EAAMzF,GAMrB,IAHA,IAAIiG,EAAS,GAET3E,EAAM,GACDb,EAAI,EAAGA,EAAIT,EAAWW,OAAQF,IAAK,CACxCa,EAAMmE,EAAO,IAAMhF,EACnB,IAAIe,EAAkB,CAClB,QAAW,IAEX0E,EAAS,GAGb,GAAIlG,EAAWS,GAAG0F,SACd,IAAK,IAAIC,EAAI,EAAGA,EAAIpG,EAAWS,GAAG0F,SAASxF,OAAQyF,IAAK,CACpD,IAAIC,EAAUrG,EAAWS,GAAG0F,SAASC,GAChB,SAAjBC,EAAQC,OACRtG,EAAWS,GAAGK,KAAOd,EAAWS,GAAGK,KAAKyF,QAAQF,EAAQvF,KAAM,YAAcuF,EAAQG,IAAM,qBAAuBH,EAAQvF,KAAO,SAM5I,GAAId,EAAWS,GAAGgG,QACd,IAAKL,EAAI,EAAGA,EAAIpG,EAAWS,GAAGgG,QAAQ9F,OAAQyF,IAAK,CAC/C,IAAIM,EAAS1G,EAAWS,GAAGgG,QAAQL,GACnC,QAA4BN,IAAxBY,EAAM,UAIN,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAOE,UAAUC,SAASlG,OAAQgG,IAElD3G,EAAWS,GAAGK,KAAOd,EAAWS,GAAGK,KAAKyF,QAAQG,EAAOE,UAAUC,SAASF,GAAI,sBAAwBD,EAAOE,UAAUC,SAASF,GAAK,WACrInF,EAAgBsB,QAAQlC,KAAKF,KAAKoG,IAAIJ,EAAOE,UAAUC,SAASF,UAKhDb,IAApBY,EAAM,QACNR,EAAS,CACL,QAAWQ,EAAOK,QAMlCd,EAAOrF,KACH,yBAAKC,QAASb,EAAWS,GAAIX,GAAIwB,EAAKC,YAAa2E,EAAQ1E,gBAAiBA,KAIpF,OAAOyE,I,uCAyBMnD,GAEb8C,QAAQC,IAAI/C,GACZpC,KAAKH,SAAS,CACV4E,mBAAoBrC,M,kCAGhBkE,EAAKC,GAEbvG,KAAKH,SAAS,CACVmB,QAASsF,EACTpF,QAASqF,M,0BAIbC,GACA,OAAOA,EAAMX,QAAQ,OAAO,SAAAY,GAAC,OAAIA,EAAEC,mB,+BAG7B,IAAD,OACL,OACI,yBAAKpG,UAAU,OAEX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,SAASlB,GAAG,WACtBY,KAAKd,MAAMmF,SAAS3D,KACjB,SAACiG,EAAS5G,GAAV,OACI,kBAAC,EAAD,CACIa,IAAKb,EACLX,GAAIW,EACJU,QAASkG,EAAQlG,QACjBmG,KAAMD,EAAQE,MACdvC,SAAU,EAAKpF,MAAMoF,eAIrC,yBAAKhE,UAAU,qBAAqBwG,MAAO,CAAEhE,OAAQ9C,KAAKd,MAAMkF,cAE3DpE,KAAKd,MAAMmF,SAAS3D,KACjB,SAACiG,EAAS5G,GAAV,OAEI,kBAAC,EAAD,CACIa,IAAKb,EACLX,GAAIW,EACJJ,IAAK,EACLD,SAAU,EAAKR,MAAMoF,SACrBuC,MAAOF,EAAQE,MACfpG,QAASkG,EAAQlG,QACjBnB,WAAYqH,EAAQ9B,uBAKpC,kBAAC,EAAD,CAAgBJ,mBAAsBzE,KAAKd,MAAMuF,mBAAoBD,WAAYxE,KAAKd,MAAMsF,WAAYD,YAAavE,KAAKd,MAAMqF,YAAavB,MAAO+D,SAAS/G,KAAKd,MAAM8D,MAAQ,GAAIhC,QAAShB,KAAKd,MAAM8B,QAASE,QAASlB,KAAKd,MAAMgC,WAGzO,wBAAIZ,UAAU,iBAAiBN,KAAKd,MAAM8B,QAAU,MAAQhB,KAAKd,MAAMgC,c,GAnM3DC,cA2MtB6F,EAAc,SAAC,GAAD,IAAG5H,EAAH,EAAGA,GAAIwH,EAAP,EAAOA,KAAMnG,EAAb,EAAaA,QAAS6D,EAAtB,EAAsBA,SAAtB,OAEhB,kBAAC,IAAD,CACI2C,SAAQ,gBAAWxG,GACnByG,YAAY,GACZ,yBAAK5G,UAAS,kBAAalB,IAAOkF,EAAW,gBAAkB,GAAjD,MAAd,IAAwEsC,EAAxE,OAGAO,EAAgCC,IAAhCD,SAAUE,EAAsBD,IAAtBC,UAAWC,EAAWF,IAAXE,OAGvBC,EAAiB,SAAC,GAA6E,IAA3EvE,EAA0E,EAA1EA,MAAOhC,EAAmE,EAAnEA,QAASE,EAA0D,EAA1DA,QAASqD,EAAiD,EAAjDA,YAAaC,EAAoC,EAApCA,WAAYC,EAAwB,EAAxBA,mBAAwB,EAE9D0C,EAAS,CAAE1B,SAAU,KAFyC,mBAEzF+B,EAFyF,KAE9EC,EAF8E,OAGpEN,IAHoE,mBAGzFO,EAHyF,KAGjFC,EAHiF,KAK1FC,EAAUN,IA8BhB,OA5BAD,GAAU,WAENQ,MAAMC,4CAAmDC,MAAK,SAAAC,GAE1D,OADA9C,QAAQC,IAAI6C,GACLA,EAASC,UACjBF,KAAKN,KACT,IASHJ,GAAU,WACW,OAAd9C,EACCqD,EAAQM,QAAQ3D,YAAY,CAAEc,IAAKd,EAAYc,IAAK8C,IAAK5D,EAAYe,IAAK8C,SAAU7D,EAAY6D,UAAW7D,EAAY8D,IAGvHT,EAAQM,QAAQ3D,cAIpBqD,EAAQM,QAAQI,WAAW9D,YAAYkD,GAAiB,CAAClD,iBAItD,yBAAKlE,UAAU,kBAElB,kBAAC,IAAD,CACIiI,IAAKX,EACL5E,MAAOA,EACPwF,cAAc,2DAEdvF,gBAAgB,QAChBwF,aAAcjB,EAAU/B,SAASD,QAAO,SAAAkD,GAAC,MAA4B,OAAxBA,EAAEC,WAAWC,UAC1DC,gBAAiB,SAAAH,GAAC,OAAIA,IAAMhB,EAAS,GAAO,KAC5CoB,gBAAiB,SAAAJ,GAAC,OAAEK,EAAsBL,EAAEC,WAAWK,kBAAmBhI,EAASE,GAAYuD,EAAmBwE,QAAQP,EAAEC,WAAWO,QAAU,EAAI,QAAU,OAAS,QACxKC,iBAAkB,iBAAM,yBACxBC,mBAAoB,iBAAM,QAC1BC,aAAc,gBAAeX,EAAf,EAAGC,WAAH,gDACMD,EAAEQ,MADR,aACkBR,EAAEE,OADpB,kCAEhBU,EAAcZ,EAAEM,kBAAmBhI,EAASE,GAF5B,6BAKdqI,eAAgB5B,EAChB6B,2BAA4B,QAWlCF,EAAgB,SAACG,EAAUzI,EAASE,GACtC,GAAIuI,EACA,IAAK,IAAI1J,EAAI,EAAGA,EAAI0J,EAASxJ,OAAQF,IAAK,CACtC,IAAI2J,EAAQD,EAAS1J,GAAG,yBACpB4J,EAAMF,EAAS1J,GAAG,4BACtB,GAAc,QAAV2J,QAA6BtE,IAAVsE,QAA+BtE,IAARuE,GACrC5C,SAAS2C,EAAME,OAAO,EAAG,KAAO1I,IAAsB,QAARyI,GAAmB5C,SAAS4C,EAAIC,OAAO,EAAG,IAAM5I,GAAW,CAC1G,IAAI6I,EAAM,4BAA8BJ,EAAS1J,GAAG,oBAAsB,SAI1E,OAHA8J,GAAO,gCAAkCJ,EAAS1J,GAAG,wBAA0B,SAC/E8J,GAAO,mCAAqCJ,EAAS1J,GAAG,yBAA2B,SACnF8J,GAAO,sCAAwCJ,EAAS1J,GAAG,4BAA8B,UAOzG,MAAO,IAILgJ,EAAwB,SAACU,EAAUzI,EAASE,GAE9C,GAAIuI,EAEA,IAAK,IAAI1J,EAAI,EAAGA,EAAI0J,EAASxJ,OAAQF,IAAK,CACtC,IAAI2J,EAAQD,EAAS1J,GAAG,yBACpB4J,EAAMF,EAAS1J,GAAG,4BAEtB,GAAc,QAAV2J,QAA6BtE,IAAVsE,QAA+BtE,IAARuE,GAErC5C,SAAS2C,EAAME,OAAO,EAAG,KAAO1I,IAAsB,QAARyI,GAAmB5C,SAAS4C,EAAIC,OAAO,EAAG,IAAM5I,GAE/F,OAAO,EAKvB,OAAO,GAGXU,IAASoI,OAAO,kBAAC,EAAD,MAAmBC,SAASC,eAAe,U","file":"static/js/main.5f622415.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom'\r\nimport Observer from '@researchgate/react-intersection-observer';\r\nimport ReactHtmlParser from 'react-html-parser';\r\n\r\nexport default class StoryPanel extends Component {\r\n  //a storypanel is visible whenit enters the viewport until another enters.\r\n  m_actionFilter = null\r\n  state = {\r\n    visible: true,\r\n    id: this.props.id,\r\n    paragraphs: []\r\n  };\r\n\r\n  headerHandleChange = event => {\r\n\r\n    if (event.isIntersecting && this.props.id !== this.props.activeID) {  //this element scrolled into view\r\n      this.props.app.setActiveID(this.props.id)\r\n    }\r\n\r\n    this.setState({\r\n      visible: this.props.id === this.props.activeID\r\n\r\n    });\r\n  };\r\n\r\n\r\n  componentDidMount() {\r\n    var res = [];\r\n    for (var i = 0; i < this.props.paragraphs.length; i++) {\r\n      res.push(\r\n        { \"text\": this.props.paragraphs[i].props.content.text, \"filter\": this.props.paragraphs[i].props.actionFilter }\r\n      )\r\n\r\n\r\n\r\n      this.setState({\r\n        paragraphs: res\r\n      })\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    //   console.log(this.props)\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <section id={\"section_\" + this.state.id} className={`storyPanelSection ${this.state.visible && this.state.id === this.props.activeID ? 'activePanel' : 'inactivePanel'}`} >\r\n        <Observer onChange={this.headerHandleChange}\r\n          threshold={1}\r\n        >\r\n\r\n          <h1 id={\"chap_\" + this.props.chapter} className={`sticky sectiontitle`} />\r\n\r\n        </Observer>\r\n\r\n        <div className=\"panelcontent\">\r\n          {this.props.paragraphs.map(\r\n            (paragraph, i) =>\r\n\r\n              <StoryParagraph\r\n                key={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                id={\"chap_\" + this.props.chapter + \"_id_p\" + i}\r\n                paragraph={paragraph.props.content.text}\r\n                panToFilter={paragraph.props.panToFilter}\r\n                highlightFilter={paragraph.props.highlightFilter}\r\n                yearStart={paragraph.props.content.minYear}\r\n                yearEnd={paragraph.props.content.maxYear}\r\n                app={this.props.app}\r\n\r\n              />\r\n\r\n          )}\r\n        </div>\r\n\r\n      </section>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nclass StoryParagraph extends Component {\r\n\r\n\r\n  m_firedAction = false\r\n  m_statusChanged = false\r\n\r\n\r\n  m_filterArray = [\"any\", []]\r\n  state = {\r\n    id: this.props.id,\r\n    visible: false\r\n  }\r\n\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('scroll', this.handleScroll);\r\n  };\r\n\r\n\r\n  handleScroll = (event) => {\r\n    //if the element is visible we check where it is on the screen, and highlight it when it enters a threshold, dehighlight when it exits.\r\n    if (this.state.visible) {\r\n      var topOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().top\r\n      var bottomOffset = ReactDOM.findDOMNode(this).getBoundingClientRect().bottom\r\n \r\n      if ((topOffset > 80 && topOffset < 400) ) {\r\n        //if this paragraph has anactionFilter to it, apply it!\r\n        if (!this.state.highlighted) {\r\n          this.setState({\r\n            highlighted: true\r\n          })\r\n          //   console.log(this.props.yearStart)\r\n          this.props.app.updateYears(this.props.yearStart, this.props.yearEnd)\r\n  \r\n            this.props.app.panToCountry(this.props.panToFilter.country)\r\n    \r\n            // this.m_mapFunctions.showAllTypes()\r\n            this.m_firedAction = true;\r\n          \r\n\r\n            this.props.app.highlightObjects(this.props.highlightFilter.objects)\r\n          \r\n        }\r\n\r\n\r\n      } else {\r\n\r\n        if (this.state.highlighted) {\r\n          //visible should update...\r\n          this.setState({\r\n            highlighted: false\r\n          })\r\n          //deactivate filter if thereisonw\r\n          this.m_firedAction = false\r\n\r\n        }\r\n\r\n      }\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('scroll', this.handleScroll);\r\n\r\n    //construct the filter if there is one\r\n    /*if (this.props.actionFilter) {\r\n      this.m_filterArray = [\"any\"]\r\n      //create the filter syntax fromthe actionFilter provided\r\n      for (var i = 0; i < this.props.actionFilter.types.length; i++) {\r\n        this.m_filterArray.push([\"==\", [\"get\", \"type\"], this.props.actionFilter.types[i]])\r\n      }\r\n      \r\n     \r\n    }*/\r\n  }\r\n\r\n  //gets called when the element intersects with Observer\r\n  paragraphChange = event => {\r\n    this.setState({\r\n      visible: event.isIntersecting\r\n    })\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n \r\n        <Observer\r\n          onChange={this.paragraphChange}\r\n        >\r\n          <p\r\n            className={`scrolltext ${this.state.highlighted ? \"active\" : \"\"}`}\r\n            id={this.props.id}>\r\n            {ReactHtmlParser(this.props.paragraph)}\r\n\r\n          </p>\r\n        </Observer>\r\n       \r\n   \r\n    )\r\n  }\r\n}","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles, makeStyles } from '@material-ui/core/styles';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\nexport default class YearSlider extends Component {\r\n\r\n    componentDidMount(){\r\n        console.log(this.props.activeYear)\r\n    }\r\n    changeYear = (event,newValue) => {\r\n        console.log(newValue)\r\n        console.log(this.props)\r\n        this.props.callbackFunction(newValue)\r\n    }\r\n    render(){\r\n        return(\r\n            <MigrationSlider  \r\n            value={this.props.activeYear}\r\n            onChange={this.changeYear} \r\n            valueLabelDisplay={\"on\"} \r\n            defaultValue={2000}\r\n            max={2050} \r\n            min={1900} />\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst MigrationSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n      height: 12,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 48,\r\n      backgroundColor: '#fff',\r\n      border: '1px solid currentColor',\r\n      borderRadius: 0,\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n     \r\n      top: 5,\r\n      left: 7,\r\n      fontSize: 14,\r\n    '& *': {\r\n      background: 'transparent',\r\n      color: '#000',\r\n    },\r\n      \r\n    \r\n    },\r\n    track: {\r\n      \r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport './css/responsive.css'\n//import ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport StoryPanel from './StoryPanel.js'\n//import * as d3 from 'd3'\nimport YearSlider from './YearSlider.js'\n//import MapFunctions from './MapFunctions';\nimport sectiondata from './playdata/sections.json'\nimport ScrollIntoView from 'react-scroll-into-view'\n//import Stackedbarchart from './stacked-bar.js'\n//import GlobeFunctions from './GlobeFunctions.js'\n\nimport * as d3 from 'd3'\nimport Globe from 'react-globe.gl'\nimport { isElementOfType } from 'react-dom/test-utils';\nclass ScrollyTeller extends Component {\n\n\n    m_debug = true\n\n\n    updateDimensions = () => {\n        this.setState({ width: window.innerWidth, height: window.innerHeight, panelHeight: window.innerHeight - 100 });\n\n    };\n\n    //  m_mapfilter = null;\n    state = {\n        sections: [],\n        width: 0,\n        height: 0,\n        //the years should be read from a file with their corresponding html content\n        // sorteddata: [],\n        activeId: 0,\n        panelHeight: 800,\n        minYear: 1945,\n        maxYear: 2020,\n        pointOfView: null,\n        autoRotate: true,\n        highlightCountries: []\n\n    }\n    panelChanged = false\n    // m_mapFunctions = null\n    //\"Facility Name\", \"Status\", \"Region\", \"Technology\", \"Generator Capacity (MW)\", \"Latitude\", \"Longitude\"\n\n\n    UNSAFE_componentWillMount = function () {\n        window.addEventListener('resize', this.updateDimensions);\n        this.updateDimensions()\n        var i\n        for (i = 0; i < sectiondata.sections.length; i++) {\n            sectiondata.sections[i].renderparagraphs = this.createPanelContent(sectiondata.sections[i].year, sectiondata.sections[i].paragraphs)\n\n        }\n        //   console.log(sectiondata.sections[4].renderparagraphs)\n        //read the content from file.\n        this.setState({\n            sections: sectiondata.sections\n        })\n\n        //  console.log(sectiondata.sections)\n\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.updateDimensions);\n    }\n    allPanels = []\n    setActiveID = (id) => {\n        //     console.log(id)\n        this.setState({\n            activeId: id\n\n        })\n    }\n\n    createPanelContent(year, paragraphs) {\n\n        //read the text from somewhere based on the given year\n        var result = [];\n        \n        var key = \"\"\n        for (var i = 0; i < paragraphs.length; i++) {\n            key = year + \"_\" + i\n            var highlightFilter = {\n                \"objects\": []\n            }\n            var filter = \"\";\n        \n            //check for features like links, if its a link, replace the \"text\" with a hyperlinnk to the \"url\"\n            if (paragraphs[i].features) {\n                for (var j = 0; j < paragraphs[i].features.length; j++) {\n                    var feature = paragraphs[i].features[j]\n                    if (feature.type === \"link\") {\n                        paragraphs[i].text = paragraphs[i].text.replace(feature.text, '<a href=\"' + feature.url + '\" target=\"_blank\">' + feature.text + '</a>')\n                        //                console.log(paragraphs[i].text)\n                    }\n                }\n            }\n            //if actions aredefined, they are added to the element here.\n            if (paragraphs[i].actions) {\n                for (j = 0; j < paragraphs[i].actions.length; j++) {\n                    var action = paragraphs[i].actions[j]\n                    if (action[\"highlight\"] !== undefined) {\n            \n\n                        //highlight means highlight the words in the text with a class of the same name, and filter things on the map of this name\n                        for (var k = 0; k < action.highlight.keywords.length; k++) {\n                       //     console.log(action.highlight.keywords[k])\n                            paragraphs[i].text = paragraphs[i].text.replace(action.highlight.keywords[k], \"<span class='bold'>\" + action.highlight.keywords[k] + \"</span>\")\n                            highlightFilter.objects.push(this.cap(action.highlight.keywords[k]))\n\n                            //capitalise first letter otherwise the filter breaks \n                        }\n                    } \n                    if (action[\"panTo\"] !== undefined) {\n                        filter = {\n                            \"country\": action.panTo\n                        }\n                    } \n                }\n\n            }\n            result.push(\n                <div content={paragraphs[i]} id={key} panToFilter={filter} highlightFilter={highlightFilter} />\n            )\n        }\n\n        return result\n\n    }\n\n    m_countryLocations = {\n        \"Israel\": { \"lat\": 31.0461, \"lon\": 34.8516 },\n        \"Europe\": { \"lat\": 54.5260, \"lon\": 15.2551 },\n        \"China-Japan\": { \"lat\": 35.8617, \"lon\": 124.1954 }\n    }\n    panToCountry = (country) => {\n        console.log(country)\n        if (country !== undefined && country!==null) {\n            console.log(\"should pan to country: \" + country)\n\n            this.setState({\n                pointOfView: { \"lat\": this.m_countryLocations[country].lat, \"lon\": this.m_countryLocations[country].lon, \"altitude\": 1.8, \"ms\":1000 },\n                autoRotate:false\n            })\n        }  else {\n            this.setState({\n                pointOfView:null\n            \n            })\n        }\n    }\n    highlightObjects(objects) {\n        //highlight countries on the globe\n        console.log(objects)\n        this.setState({\n            highlightCountries: objects\n        })\n    }\n    updateYears(min, max) {\n        //    console.log(\"update years: \" + min + \"   \" + max)\n        this.setState({\n            minYear: min,\n            maxYear: max\n        })\n    }\n    //capitalise the first letter of  string\n    cap(lower) {\n        return lower.replace(/^\\w/, c => c.toUpperCase());\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                <div className=\"MainContainer\">\n                    <div className=\"navbar\" id=\"yearNav\">\n                        {this.state.sections.map(\n                            (section, i) =>\n                                <NavMenuItem\n                                    key={i}\n                                    id={i}\n                                    chapter={section.chapter}\n                                    name={section.title}\n                                    activeId={this.state.activeId}\n                                />\n                        )}\n                    </div>\n                    <div className=\"Panels topDistance\" style={{ height: this.state.panelHeight }}>\n\n                        {this.state.sections.map(\n                            (section, i) =>\n\n                                <StoryPanel\n                                    key={i}\n                                    id={i}\n                                    app={this}\n                                    activeID={this.state.activeId} //the Storypanels figure out if they are the active panel and display accordingly\n                                    title={section.title}\n                                    chapter={section.chapter}\n                                    paragraphs={section.renderparagraphs}\n                                />\n                        )}\n                    </div>\n\n                    <GlobeFunctions highlightCountries = {this.state.highlightCountries} autoRotate={this.state.autoRotate} pointOfView={this.state.pointOfView} width={parseInt(this.state.width / 2)} minYear={this.state.minYear} maxYear={this.state.maxYear} />\n\n                </div>\n                <h2 className=\"yearParagraph\">{this.state.minYear + \" - \" + this.state.maxYear}</h2>\n            </div>\n        );\n    }\n}\n\n\n\nconst NavMenuItem = ({ id, name, chapter, activeId }) => (\n\n    <ScrollIntoView\n        selector={`#chap_${chapter}`}\n        alignToTop={false} >\n        <div className={`navItem ${id === activeId ? \"navItemActive\" : \"\"} `}> {name} </div>\n    </ScrollIntoView>\n)\nconst { useState, useEffect, useRef } = React;\n\n\nconst GlobeFunctions = ({ width, minYear, maxYear, pointOfView, autoRotate, highlightCountries}) => {\n\n    const [countries, setCountries] = useState({ features: [] });\n    const [hoverD, setHoverD] = useState();\n\n    const globeEl = useRef()\n\n    useEffect(() => {\n        // load data\n        fetch(process.env.PUBLIC_URL + '/mergedMigrations.json').then(response => {\n            console.log(response);\n            return response.json();\n        }).then(setCountries);\n    }, []);\n\n   /* useEffect(() => {\n        // Auto-rotate\n        console.log(autoRotate)\n        globeEl.current.controls().autoRotate = {autoRotate};\n        globeEl.current.controls().autoRotateSpeed = 0.7;\n      }, []);\n*/\n    useEffect(() => {\n        if(pointOfView!==null)  {\n            globeEl.current.pointOfView({ lat: pointOfView.lat, lng: pointOfView.lon, altitude: pointOfView.altitude}, pointOfView.ms )\n            \n        } else {\n            globeEl.current.pointOfView( )\n        }\n     //   console.log(autoRotate)\n     //   console.log(pointOfView)\n        globeEl.current.controls().autoRotate= hoverD ? false : {autoRotate}\n    })\n\n   \n    return <div className=\"globeContainer\">\n\n        <Globe\n            ref={globeEl}\n            width={width}\n            globeImageUrl=\"//unpkg.com/three-globe@2.11.1/example/img/earth-day.jpg\"\n            // backgroundImageUrl=\"//unpkg.com/three-globe/example/img/night-sky.png\"\n            backgroundColor=\"white\"\n            polygonsData={countries.features.filter(d => d.properties.ISO_A2 !== 'AQ')}\n            polygonAltitude={d => d === hoverD ? 0.10 : 0.03}\n            polygonCapColor={d=>hasActivePolicyInYear(d.properties.migrationpolicies, minYear, maxYear) ?  highlightCountries.indexOf(d.properties.ADMIN) > -1 ? \"green\" : \"pink\" : \"grey\"}\n            polygonSideColor={() => 'rgba(0, 100, 0, 0.15)'}\n            polygonStrokeColor={() => '#111'}\n            polygonLabel={({ properties: d }) => `\n        <div class=\"popup\"><b>${d.ADMIN} (${d.ISO_A2}):</b> <br />\n        ${getPolicyText(d.migrationpolicies, minYear, maxYear)}\n        </div>\n      `}\n            onPolygonHover={setHoverD}\n            polygonsTransitionDuration={300}\n    \n\n\n        />\n    </div>\n\n}\n\n/*Type of institution\":\"Ministry\",\"Institution Overview\"*/\n\nconst getPolicyText = (policies, minYear, maxYear) => {\n    if (policies) {\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n                if ((parseInt(start.substr(0, 4)) <= maxYear) && ((end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear))) {\n                    let str = \"<b>Institution Name:</b> \" + policies[i][\"Institution name\"] + \"<br />\"\n                    str += \"<b>Institution Overview:</b> \" + policies[i][\"Institution Overview\"] + \"<br />\"\n                    str += \"<b> Year of establishment: </b> \" + policies[i][\"Year of establishment\"] + \"<br />\"\n                    str += \"<b> Year of disestablishment: </b> \" + policies[i][\"Year of disestablishment\"] + \"<br />\"\n                    return str\n                }\n            }\n        }\n    }\n\n    return \"\"\n}\n/*\"Year of establishment\":\"1992\",\"Year of disestablishment\":\"1996\"*/\n\nconst hasActivePolicyInYear = (policies, minYear, maxYear) => {\n    //console.log(\"...\")\n    if (policies) {\n\n        for (let i = 0; i < policies.length; i++) {\n            let start = policies[i][\"Year of establishment\"]\n            let end = policies[i][\"Year of disestablishment\"]\n\n            if (start !== \"Nil\" && start !== undefined && end !== undefined) {\n\n                if ((parseInt(start.substr(0, 4)) <= maxYear) && ((end === \"Nil\") || (parseInt(end.substr(0, 4)) > minYear))) {\n       //             console.log(\"has active Policy\")\n                    return true\n                }\n            }\n        }\n    }\n    return false\n}\n\nReactDOM.render(<ScrollyTeller />, document.getElementById('root'));\n"],"sourceRoot":""}